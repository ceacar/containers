version: '3.2'

services:

  luigi:
    image: ceacar/exp:simple_luigi
    # ports:
    #   - '38888:10000'
    hostname: luigi_host
    container_name: luigi_test

  kafka:
    image: ceacar/exp:simple_kafka
    tty: true
    stdin_open: true
    hostname: kafka_host 
    # ports:
    #  - '9092'
    # expose:
    #   - '9092'
    #   - '10000'
      # - '29094'
    container_name: kafka_test 
    # command: /bin/bash -c "sleep 9999999"

    # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    # KAFKA_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://kafka:9094
    # KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
    # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    # KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    # environment:
    #   # For more details see See https://rmoff.net/2018/08/02/kafka-listeners-explained/
    #   KAFKA_LISTENERS: LISTENER_BOB://kafka0:29092,LISTENER_FRED://kafka0:9092,LISTENER_ALICE://kafka0:29094
    #   KAFKA_ADVERTISED_LISTENERS: LISTENER_BOB://kafka0:29092,LISTENER_FRED://localhost:9092,LISTENER_ALICE://never-gonna-give-you-up:29094
    #   KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_BOB:PLAINTEXT,LISTENER_FRED:PLAINTEXT,LISTENER_ALICE:PLAINTEXT
    #   KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_BOB

    #web:
    #  build: .
    #  image: web
    #  container_name: web
    #  ports:
    #    - '5004:5000'
    #  command: python manage.py run -h 0.0.0.0
    #  volumes:
    #    - .:/usr/src/app
    #  environment:
    #    - FLASK_DEBUG=1
    #    - APP_SETTINGS=project.server.config.DevelopmentConfig
    #  depends_on:
    #    - redis

    #worker:
    #  image: web
    #  command: python manage.py run_worker
    #  volumes:
    #    - .:/usr/src/app
    #  environment:
    #    - APP_SETTINGS=project.server.config.DevelopmentConfig
    #  depends_on:
    #    - redis

  elasticsearch:
    image: ceacar/exp:simple_elasticsearch
    # build:
    #   context: elasticsearch/
    #   args:
    #     ELK_VERSION: $ELK_VERSION
    container_name: elasticsearch_test
    volumes:
      - /tmp/elasticsearch/data:/usr/share/elasticsearch/data
      # - ./../elasticsearch/data:/usr/share/elasticsearch/data
      #  - ./elasticsearch/docker/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

      # - type: bind
      #   source: ./elasticsearch/config/elasticsearch.yml
      #   target: /usr/share/elasticsearch/config/elasticsearch.yml
      #   read_only: true
      # - type: volume
      #   source: elasticsearch
      #   target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    # networks:
    #   - elk

  logstash:
    image: ceacar/exp:simple_logstash
    container_name: logstash_test
    # build:
    #   context: logstash/
    #   args:
    #     ELK_VERSION: $ELK_VERSION
    # volumes:
      # - ./logstash/docker/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      # - ./logstash/docker/pipeline:/usr/share/logstash/pipeline
  
      # - type: bind
      #   source: ./logstash/config/logstash.yml
      #   target: /usr/share/logstash/config/logstash.yml
      #   read_only: true
      # - type: bind
      #   source: ./logstash/pipeline
      #   target: /usr/share/logstash/pipeline
      #   read_only: true
  
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    # networks:
    #  - elk
    depends_on:
      - elasticsearch

  kibana:
    image: ceacar/exp:simple_kibana
    container_name: kibana_test
    # build:
    #   context: kibana/
    #   args:
    #     ELK_VERSION: $ELK_VERSION
    # volumes:
    #   - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml

      # - type: bind
      #   source: ./kibana/config/kibana.yml
      #   target: /usr/share/kibana/config/kibana.yml
      #   read_only: true
    ports:
      - "5601:5601"
    # networks:
    #   - elk
    depends_on:
      - elasticsearch

# ktec:
#   image: ceacar/exp:simple_ktec
#   hostname: ktec_host
#   container_name: ktec_test
#   command: /bin/bash -c "sleep 9999999"
#   depends_on:
#     - elasticsearch
#     - kafka



# networks:
#   elk:
#     driver: bridge

# volumes:
#   elasticsearch:
